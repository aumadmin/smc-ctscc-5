@functions {
    // To support the layout classification below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : "";}).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/
    
    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    Style.Include("http://fonts.googleapis.com/css?family=Quattrocento+Sans");
    Style.Include("site.css");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    var displayAddress = (Model.Address != null);
	

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new [] {"LeftSide", "RightSide"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle triple widget zones on and off
    var tripleClass = CalcuClassify(new [] {"TripleFirst", "TripleSecond", "TripleThird"}, "triple-"); // for triple-1, triple-2, etc. if any of the triple zones are filled
    if (HasText(tripleClass)) {
        Model.Classes.Add(tripleClass);
    }

    /* Inserting User Login shape
       ***************************************************************/

    WorkContext.Layout.Header.Add(New.Head(), "5"); // Header 
    WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/
    
    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
@tag.StartElement
@if (Model.Header != null) {
<header id="layout-header" class="group">
    <div id="header">
		@if ( Model.HeaderLeft != null )
          {
		  <div id="layout-headerleft" class="headerleft">
			@Zone(Model.HeaderLeft)
		  </div>
		  }         
		@if ( Model.HeaderRight != null )
          {
		  <div id="layout-headerright" class="headerright">
			@Zone(Model.HeaderRight)
		  </div>
		  }         
		@if ( Model.HeaderLeftSub != null )
          {
		  <div id="layout-headerleftsub" class="headerleft">
			@Zone(Model.HeaderLeftSub)
		  </div>
		  }         
    </div>
</header>
}
@if (Model.Navigation != null) {
<div id="navigation">
    @Zone(Model.Navigation)
</div>
}

<div id="layout-main-container">
@if (Model.Featured != null) {
<div id="layout-featured" class="group">
    @Zone(Model.Featured)
</div>
}
@if (Model.BeforeMain != null) {
<div id="layout-before-main" class="group">
    @Zone(Model.BeforeMain)
</div>
}
<div id="layout-main" class="group">
    @if (Model.LeftSide != null) {
    <aside id="left-side" class="left-side group">
        @Zone(Model.LeftSide)
    </aside>
    }
    <div id="layout-content" class="group">
        @if (Model.Messages != null) {
        <div id="messages">
            @Zone(Model.Messages)
        </div>
        }
        @if (Model.BeforeContent != null) {
        <div id="before-content">
            @Zone(Model.BeforeContent)
        </div>
        }
     @* the model content for the page is in the Content zone @ the default position (nothing, zero, zilch) *@
         <div id="content" class="group">
       @if (Model.SplitPageRight != null) {
        <div class="split-page-right">
        <right id="split-page-right" class="split-page-right group">
            @Zone(Model.SplitPageRight)
        </right>
        </div>
    }
       @if (Model.Content != null) {
            @Zone(Model.Content)
        }
       </div>
    
    @if (Model.AfterContent != null) {
        <div id="after-content">
            @Zone(Model.AfterContent)
        </div>
        }
    </div>
    @if (Model.RightSide != null) {
    <aside id="right-side" class="right-side">
        @Zone(Model.RightSide)
    </aside>
    }
</div>
@if (Model.AfterMain != null) {
<div id="layout-after-main" class="group">
    @Zone(Model.AfterMain)
</div>
}

@if (Model.TripleFirst != null || Model.TripleSecond != null || Model.TripleThird != null) {
<div id="layout-triple-container">
<div id="layout-triple" class="group">
    @if (Model.TripleFirst != null) {
    <div id="triple-first">
        @Zone(Model.TripleFirst)
    </div>
    }
    @if (Model.TripleSecond != null) {
    <div id="triple-second">
        @Zone(Model.TripleSecond)
    </div>
    }
    @if (Model.TripleThird != null) {
    <div id="triple-third">
        @Zone(Model.TripleThird)
    </div>
    }
</div>
</div>
}
</div>

<div id="layout-footer" class="group">
    <footer id="footer">
        @if(Model.Footer != null) {
        <div id="footer-sig" class="group">
            @Zone(Model.Copyright)
            @Zone(Model.Footer)
        </div>
        }
    </footer>
</div>
@tag.EndElement